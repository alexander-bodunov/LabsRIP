''' def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.request = None

    def index(self,request,cat_id):
        #try:
            #page_num=request.GET["page_num"]
        #except (KeyError):
        page_num=1
        pag=Paginator(models.Department.objects.all(), 3, orphans=2)
        dep=pag.page(page_num)
        #dep1=dep.object_list
        dep1=models.Department.objects.all()
        for department in dep1:
            data['departments'].append(department)
        return render(request,"departments.html",data)


    def get_context_data(self, **kwargs):
        context=super(DepartmentsListView, self).get_context_data(**kwargs)
        try:
            page_num=self.request.GET["page"]
        except KeyError:
            page_num=1
        context["dep"]=models.Department.objects.order_by("name")
        if kwargs["page_num"]==None:
            context["departments"]=models.Department.objects.first()
        else:
            context["departments"]=models.Department.objects.get(pk=kwargs["dep_id"])
        paginator = Paginator(models.Department.objects.filter(department=context["departments"]).order_by("name"), 1,allow_empty_first_page=True)
        try:
            context["departments"]= paginator.page(page_num)
        except (InvalidPage):
            context["departments"]=paginator.page(1)
        return context'''


        <!--<a href="{% url 'add_worker' %}"></a>-->

        {% if contacts.has_next %}
        {% endif %}


        Page {{ paginator.number }} of

        ................................................
      from twviews.py

       '''allDepartments=self.get_all_departments()
        paginator = Paginator(allDepartments, 3,allow_empty_first_page=True)
        data1=paginator.page(page_num)
        page_num=int(page_num)
        if data1 == False:
            return HttpResponse(":( Пустая страница")
        for department in data1:
            data['departments'].append(department)
        count=allDepartments.count()
        pages=self.get_num_pages(count,3)
        datapag={}
        datapag['has_previous']=self.has_next(page_num,1)
        datapag['has_next']=self.has_next(page_num,pages)
        datapag['num_pages']=self.pages(pages)
        datapag['previous_page_number']=page_num-1
        datapag['next_page_number']=page_num+1
        datapag['n']=count
        datapag['Is']=True
        data['paginator']=datapag
        #data['user_name']=user.
        return data
    def get_all_departments(self):
        return models.Department.objects.all()
    #def count_all_departments:
        #return models.Department.objects.all.count()
    def has_next(self,x,y):
        if x==y:
            return False
        return True
    def get_num_pages(self,x,y):
        return (x // y) +1
    def pages(self,x):
        i=1
        while i<x+1:
            yield i
            i=i+1'''



            '''allDepartments=self.get_all_departments()
        paginator = Paginator(allDepartments, 3,allow_empty_first_page=True)
        data1=paginator.page(page_num)
        if data1 == False:
            return HttpResponse(":( Пустая страница")
        for department in data1:
            data['departments'].append(department)
        #data['user_name']=user.
        return data
    def get_all_departments(self):
        return models.Department.objects.all()'''




    '''def get(self,request):
        try:
            page_num=self.request.GET["page_num"]
        except KeyError:
            page_num=3
        allDepartments=self.get_all_departments()
        paginator = Paginator(allDepartments, 3,allow_empty_first_page=True)
        data1=paginator.page(page_num)
        if data1 == False:
            return HttpResponse(":( Пустая страница")
        for department in data1:
            data['departments'].append(department)
        #data['user_name']=user.
        return render(request,'departments.html',data)
    def get_all_departments(self):
        return models.Department.objects.all()'''

